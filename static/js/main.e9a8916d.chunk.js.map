{"version":3,"sources":["components/BasicAppBar.tsx","components/FormDialog.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","BasicAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","appBar","marginLeft","flex","FormDialog","Props","onChange","e","target","name","form","value","amount","parseInt","Dialog","fullScreen","open","onClose","aria-labelledby","IconButton","edge","color","onClick","aria-label","Button","handler","checked","DialogContent","TextField","autoFocus","label","type","fullWidth","reorder","list","startIndex","endIndex","result","splice","removed","App","props","state","items","onDragEnd","bind","onDialogOpen","destination","this","source","index","setState","handleToggle","newChecked","length","handleRemove","item","droppableId","provided","snapshot","List","ref","innerRef","droppableProps","style","isDraggingOver","background","map","labelId","draggableId","providedDraggable","snapshotDraggable","ListItem","draggableProps","dragHandleProps","draggableStyle","isDragging","isChecked","userSelect","opacity","textDecorationLine","ListItemIcon","Checkbox","icon","checkedIcon","inputProps","ListItemText","primary","secondary","ListItemSecondaryAction","size","fontSize","placeholder","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9a8916d.chunk.js","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        title: {\n            flexGrow: 1,\n        },\n    }),\n);\n\nexport default function BasicAppBar() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        BoodschApp\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","import { AppBar, createStyles, IconButton, Theme } from \"@material-ui/core\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from '@material-ui/core/TextField';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport React from 'react';\nimport { IDialogProps } from \"../interfaces/IDialogProps\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        appBar: {\n            position: 'relative',\n        },\n        title: {\n            marginLeft: theme.spacing(2),\n            flex: 1,\n        },\n    }),\n);\n\nexport default function FormDialog(Props: IDialogProps) {\n    const classes = useStyles();\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        switch (e.target.name) {\n            case 'name':\n                Props.form.name = e.target.value;\n                break;\n            case 'amount':\n                Props.form.amount = parseInt(e.target.value);\n                break;\n        }\n    }\n\n    const onSubmit = (): void => {\n        Props.handler({\n            name: Props.form.name,\n            amount: Props.form.amount,\n            checked: false\n        })\n    }\n\n    return (\n        <Dialog fullScreen open={Props.open} onClose={Props.onClose} aria-labelledby=\"add-to-list\">\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={Props.onClose} aria-label=\"close\">\n                        <CloseIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Add to list\n                    </Typography>\n                    <Button color=\"inherit\" onClick={onSubmit}>\n                        save\n                    </Button>\n                </Toolbar>\n            </AppBar>\n            <DialogContent>\n                <TextField\n                    autoFocus\n                    name=\"name\"\n                    label=\"Name\"\n                    type=\"text\"\n                    onChange={onChange}\n                    fullWidth\n                />\n                <TextField\n                    name=\"amount\"\n                    label=\"Qty\"\n                    type=\"number\"\n                    onChange={onChange}\n                    fullWidth\n                />\n            </DialogContent>\n        </Dialog>\n    );\n}\n","import {\n    Checkbox,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText\n} from \"@material-ui/core\";\nimport AddShoppingCartIcon from \"@material-ui/icons/AddShoppingCart\";\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport React from 'react';\nimport {\n    DragDropContext,\n    Draggable,\n    DraggableProvided,\n    DraggableStateSnapshot,\n    Droppable,\n    DroppableProvided,\n    DroppableStateSnapshot,\n    DropResult\n} from \"react-beautiful-dnd\";\nimport './App.css';\nimport BasicAppBar from \"./components/BasicAppBar\";\nimport FormDialog from \"./components/FormDialog\";\nimport { IAppState } from \"./interfaces/IAppState\";\nimport { IShopData } from \"./interfaces/IShopData\";\n\nfunction createData(name: string, amount: number, checked: boolean): IShopData {\n    return { name, amount, checked };\n}\n\nconst getItemStyle = (draggableStyle: any, isDragging: boolean, isChecked: boolean): {} => ({\n    userSelect: 'none',\n    background: isDragging ? 'lightgrey' : 'white',\n    opacity: isChecked ? '0.4' : '1.0',\n    textDecorationLine: isChecked ? 'line-through' : 'none',\n    ...draggableStyle\n});\n\nconst getListStyle = (isDraggingOver: boolean): {} => ({\n    background: isDraggingOver ? 'lightblue' : 'white'\n});\n\nconst reorder = (list: IShopData[], startIndex: number, endIndex: number): IShopData[] => {\n    const result = [ ...list ];\n    const [ removed ] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nexport default class App extends React.Component<{}, IAppState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = { items: [], open: false };\n\n        this.onDragEnd = this.onDragEnd.bind(this);\n        this.onDialogOpen = this.onDialogOpen.bind(this);\n    }\n\n    public onDragEnd(result: DropResult): void {\n        // dropped outside the list\n        if (!result.destination) {\n            return;\n        }\n\n        const items = reorder(this.state.items, result.source.index, result.destination.index);\n\n        this.setState({ ...this.state, items });\n    }\n\n    public onDialogOpen(): void {\n        this.setState({ open: true });\n    }\n\n    public render() {\n        const handleToggle = (index: number) => () => {\n            const newChecked = [ ...this.state.items ]\n            newChecked[index].checked = !newChecked[index].checked;\n            const items = reorder(newChecked, index, newChecked[index].checked ? (newChecked.length - 1) : index);\n\n            this.setState({ ...this.state, items });\n        };\n\n        const handleRemove = (index: number) => () => {\n            this.state.items.splice(index, 1);\n\n            this.setState({ ...this.state });\n        }\n\n        const handleAddition = (item: IShopData): void => {\n            const items = reorder(\n                [ ...this.state.items, createData(item.name, item.amount, item.checked) ],\n                this.state.items.length,\n                0\n            );\n\n            this.setState({ ...this.state, items, open: false });\n        }\n\n        return (\n            <div className=\"App\">\n                <BasicAppBar/>\n                <FormDialog open={this.state.open}\n                            onClose={() => this.setState({ open: false })}\n                            handler={handleAddition}\n                            form={{ name: \"\", amount: 1 }}\n                />\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <Droppable droppableId=\"droppable\">\n                        {(provided: DroppableProvided, snapshot: DroppableStateSnapshot) => (\n                            <List\n                                ref={provided.innerRef}\n                                {...provided.droppableProps}\n                                style={getListStyle(snapshot.isDraggingOver)}\n                            >\n                                {this.state.items.map((item, index) => {\n                                    const labelId = `item-${index}`;\n\n                                    return (\n                                        <Draggable key={index} draggableId={labelId} index={index}>\n                                            {(providedDraggable: DraggableProvided, snapshotDraggable: DraggableStateSnapshot) => (\n                                                <ListItem\n                                                    ref={providedDraggable.innerRef}\n                                                    {...providedDraggable.draggableProps}\n                                                    {...providedDraggable.dragHandleProps}\n                                                    style={getItemStyle(\n                                                        providedDraggable.draggableProps.style,\n                                                        snapshotDraggable.isDragging,\n                                                        item.checked\n                                                    )}\n                                                    onClick={handleToggle(index)}\n                                                >\n                                                    <ListItemIcon>\n                                                        <Checkbox\n                                                            color=\"primary\"\n                                                            icon={<CheckBoxOutlineBlankIcon/>}\n                                                            checkedIcon={<CheckBoxIcon/>}\n                                                            checked={item.checked}\n                                                            inputProps={{ 'aria-labelledby': labelId }}\n                                                        />\n                                                    </ListItemIcon>\n                                                    <ListItemText\n                                                        primary={item.name}\n                                                        secondary={\"Qty: \" + item.amount}\n                                                    />\n                                                    <ListItemSecondaryAction>\n                                                        <IconButton\n                                                            aria-label=\"delete\"\n                                                            size=\"small\"\n                                                            onClick={handleRemove(index)}\n                                                        >\n                                                            <DeleteIcon fontSize=\"inherit\"/>\n                                                        </IconButton>\n                                                    </ListItemSecondaryAction>\n                                                </ListItem>\n                                            )}\n                                        </Draggable>\n                                    )\n                                })}\n                                {provided.placeholder}\n                            </List>\n                        )}\n                    </Droppable>\n                    <IconButton\n                        aria-label=\"add\"\n                        onClick={this.onDialogOpen}\n                    >\n                        <AddShoppingCartIcon fontSize=\"large\"/>\n                    </IconButton>\n                </DragDropContext>\n            </div>\n        );\n    };\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}